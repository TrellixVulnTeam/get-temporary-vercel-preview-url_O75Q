{"code":"import core from '@actions/core';\r\nimport github from '@actions/github';\r\nimport axios from 'axios';\r\nimport { assert } from 'assert-ts';\r\nconst waitForUrl = async ({ url, maxTimeout, checkIntervalInMilliseconds, }) => {\r\n    const iterations = maxTimeout / (checkIntervalInMilliseconds / 1000);\r\n    for (let i = 0; i < iterations; i++) {\r\n        try {\r\n            await axios.get(url);\r\n            return;\r\n        }\r\n        catch (e) {\r\n            console.log('Url unavailable, retrying...');\r\n            await new Promise((r) => setTimeout(r, checkIntervalInMilliseconds));\r\n        }\r\n    }\r\n    core.setFailed(`Timeout reached: Unable to connect to ${url}`);\r\n};\r\nconst waitForStatus = async ({ token, owner, repo, deployment_id, maxTimeout, allowInactive, checkIntervalInMilliseconds, }) => {\r\n    const octokit = github.getOctokit(token);\r\n    const iterations = maxTimeout / (checkIntervalInMilliseconds / 1000);\r\n    for (let i = 0; i < iterations; i++) {\r\n        try {\r\n            const statuses = await octokit.rest.repos.listDeploymentStatuses({\r\n                owner,\r\n                repo,\r\n                deployment_id,\r\n            });\r\n            const status = statuses.data.length > 0 && statuses.data[0];\r\n            if (!status) {\r\n                throw Error('No status was available');\r\n            }\r\n            if (status && allowInactive === true && status.state === 'inactive') {\r\n                return status;\r\n            }\r\n            if (status && status.state !== 'success') {\r\n                throw Error('No status with state \"success\" was available');\r\n            }\r\n            if (status && status.state === 'success') {\r\n                return status;\r\n            }\r\n            throw Error('Unknown status error');\r\n        }\r\n        catch (e) {\r\n            console.log('Deployment unavailable or not successful, retrying...');\r\n            console.log(e);\r\n            await new Promise((r) => setTimeout(r, checkIntervalInMilliseconds));\r\n        }\r\n    }\r\n    core.setFailed(`Timeout reached: Unable to wait for an deployment to be successful`);\r\n};\r\nconst run = async () => {\r\n    try {\r\n        // Inputs\r\n        const GITHUB_TOKEN = core.getInput('token', { required: true });\r\n        const ENVIRONMENT = core.getInput('environment');\r\n        const MAX_TIMEOUT = Number(core.getInput('max_timeout')) || 60;\r\n        const ALLOW_INACTIVE = Boolean(core.getInput('allow_inactive')) || false;\r\n        const CHECK_INTERVAL_IN_MS = (Number(core.getInput('check_interval')) || 2) * 1000;\r\n        // Fail if we have don't have a github token\r\n        if (!GITHUB_TOKEN) {\r\n            core.setFailed('Required field `token` was not provided');\r\n        }\r\n        const octokit = github.getOctokit(GITHUB_TOKEN);\r\n        const context = github.context;\r\n        const owner = context.repo.owner;\r\n        const repo = context.repo.repo;\r\n        const PR_NUMBER = github?.context?.payload?.pull_request?.number;\r\n        assert(!!PR_NUMBER, 'No pull request number was found');\r\n        const currentPR = await octokit.rest.pulls.get({\r\n            owner,\r\n            repo,\r\n            pull_number: PR_NUMBER,\r\n        });\r\n        if (currentPR.status !== 200) {\r\n            core.setFailed('Could not get information about the current pull request');\r\n        }\r\n        const prSHA = currentPR.data.head.sha;\r\n        const deployments = await octokit.rest.repos.listDeployments({\r\n            owner,\r\n            repo,\r\n            sha: prSHA,\r\n            environment: ENVIRONMENT,\r\n        });\r\n        assert(deployments.data.length > 0, `no deployments in ${JSON.stringify(deployments)}`);\r\n        const deployment = deployments.data[0];\r\n        const status = await waitForStatus({\r\n            owner,\r\n            repo,\r\n            deployment_id: deployment.id,\r\n            token: GITHUB_TOKEN,\r\n            maxTimeout: MAX_TIMEOUT,\r\n            allowInactive: ALLOW_INACTIVE,\r\n            checkIntervalInMilliseconds: CHECK_INTERVAL_IN_MS,\r\n        });\r\n        // Get target url\r\n        const targetUrl = status?.target_url;\r\n        if (!targetUrl) {\r\n            console.log(`no status found, running again`);\r\n            await run();\r\n            return;\r\n        }\r\n        console.log('target url Â»', targetUrl);\r\n        // Set output\r\n        core.setOutput('url', targetUrl);\r\n        // Wait for url to respond with a sucess\r\n        console.log(`Waiting for a status code 200 from: ${targetUrl}`);\r\n        await waitForUrl({ url: targetUrl, maxTimeout: MAX_TIMEOUT, checkIntervalInMilliseconds: CHECK_INTERVAL_IN_MS });\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Error) {\r\n            core.setFailed(error.message);\r\n        }\r\n        else {\r\n            core.setFailed(`unspecified error occurred.  Oh my`);\r\n        }\r\n    }\r\n};\r\nrun();\r\n//# sourceMappingURL=index.js.map","references":["/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/@actions/core/lib/core.d.ts","/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/@actions/github/lib/github.d.ts","/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/axios/index.d.ts","/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/assert-ts/lib/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"\"}"},"dts":{"name":"/Users/paulcowan/projects/get-temporary-vercel-preview-url/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"export {};\r\n//# sourceMappingURL=index.d.ts.map"}}
